// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"
)

const createPosition = `-- name: CreatePosition :exec
INSERT INTO positions (latitude,longitude,speed,heading,device_imei) VALUES (?,?,?,?,?)
`

type CreatePositionParams struct {
	Latitude   float64
	Longitude  float64
	Speed      int64
	Heading    int64
	DeviceImei string
}

func (q *Queries) CreatePosition(ctx context.Context, arg CreatePositionParams) error {
	_, err := q.db.ExecContext(ctx, createPosition,
		arg.Latitude,
		arg.Longitude,
		arg.Speed,
		arg.Heading,
		arg.DeviceImei,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id,email,password) VALUES (?,?,?)
`

type CreateUserParams struct {
	ID       string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.ID, arg.Email, arg.Password)
	return err
}

const getDevices = `-- name: GetDevices :many
SELECT devices.imei, devices.battery_power, devices.charging, devices.last_status_packet from devices JOIN user_devices ON devices.imei = user_devices.device_imei WHERE user_devices.userid = ?
`

func (q *Queries) GetDevices(ctx context.Context, userid string) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, getDevices, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.Imei,
			&i.BatteryPower,
			&i.Charging,
			&i.LastStatusPacket,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, email, password, last_login_time FROM users WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.LastLoginTime,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, last_login_time FROM users WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.LastLoginTime,
	)
	return i, err
}

const insertDevice = `-- name: InsertDevice :exec
INSERT INTO devices (imei,battery_power,charging) VALUES (?,?,?) ON CONFLICT DO NOTHING
`

type InsertDeviceParams struct {
	Imei         string
	BatteryPower int64
	Charging     bool
}

func (q *Queries) InsertDevice(ctx context.Context, arg InsertDeviceParams) error {
	_, err := q.db.ExecContext(ctx, insertDevice, arg.Imei, arg.BatteryPower, arg.Charging)
	return err
}

const linkDevice = `-- name: LinkDevice :exec
INSERT INTO user_devices (userid,device_imei) VALUES (?,?)
`

type LinkDeviceParams struct {
	Userid     string
	DeviceImei string
}

func (q *Queries) LinkDevice(ctx context.Context, arg LinkDeviceParams) error {
	_, err := q.db.ExecContext(ctx, linkDevice, arg.Userid, arg.DeviceImei)
	return err
}

const updateBatteryPower = `-- name: UpdateBatteryPower :exec
UPDATE devices SET battery_power = ? WHERE imei = ?
`

type UpdateBatteryPowerParams struct {
	BatteryPower int64
	Imei         string
}

func (q *Queries) UpdateBatteryPower(ctx context.Context, arg UpdateBatteryPowerParams) error {
	_, err := q.db.ExecContext(ctx, updateBatteryPower, arg.BatteryPower, arg.Imei)
	return err
}

const updateCharging = `-- name: UpdateCharging :exec
UPDATE devices SET charging = ? WHERE imei = ?
`

type UpdateChargingParams struct {
	Charging bool
	Imei     string
}

func (q *Queries) UpdateCharging(ctx context.Context, arg UpdateChargingParams) error {
	_, err := q.db.ExecContext(ctx, updateCharging, arg.Charging, arg.Imei)
	return err
}
